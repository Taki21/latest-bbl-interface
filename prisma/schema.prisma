generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ───────────── ENUMS ───────────── */

enum MemberRole {
  Owner           @map("Owner")
  Supervisor      @map("Supervisor")
  Project_Manager @map("Project Manager")
  Default         @map("Default")
  Professor       @map("Professor")
  Team_Leader     @map("Team Leader")
}

enum TaskStatus {
  not_started  @map("not-started")
  in_progress  @map("in-progress")
  under_review @map("under-review")
  completed
}

enum TaskPriority {
  low
  medium
  high
}

enum ProjectStatus {
  active
  completed
  on_hold     @map("on-hold")
}

/* ───────────── MODELS ───────────── */

model User {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  backupEmail String?
  address     String      @unique
  balance     BigInt

  /* one-to-many */
  tasks       Task[]      @relation("UserTasks")
  projects    Project[]   @relation("UserProjects")

  /* communities this user CREATED (owner) */
  communities Community[] @relation("CreatorCommunities")

  /* communities this user BELONGS to (via Member) */
  members     Member[]    @relation("UserMembers")

  createdAt   String?
  updatedAt   String?
}

/* ═══════════ COMMUNITY & MEMBER ═══════════ */

model Community {
  id               String     @id @default(uuid())
  joinCode         String?    @unique
  name             String
  description      String
  affiliation      String

  /* FK → User (creator) */
  creatorId        String
  creator          User       @relation("CreatorCommunities", fields: [creatorId], references: [id])

  newMemberReward  Int
  referralReward   Int
  tokenAddress     String?
  tokenName        String
  tokenSymbol      String
  balance          BigInt

  members          Member[]
  projects         Project[]  @relation("CommunityProjects")

  // Tag catalog + links
  tags             Tag[]          // all tags defined for this community
  memberTags       MemberTag[]    // all member↔tag links in this community
  projectTags      ProjectTag[]   // all project↔tag links in this community

  createdAt        String?
  updatedAt        String?
}

model Member {
  id           String     @id @default(uuid())

  /* FK → User */
  userId       String
  user         User       @relation("UserMembers", fields: [userId], references: [id])

  /* FK → Community */
  communityId  String
  community    Community  @relation(fields: [communityId], references: [id])

  /* per-community display name */
  name         String?

  balance      BigInt
  role         MemberRole

  /* many-to-many & misc back-refs */
  tasks         Task[]     @relation("MemberTasks")
  projects      Project[]  @relation("MemberProjects")
  allocation    BigInt     @default(0)
  teamLed       Project[]  @relation("TeamLeader")
  created       Project[]  @relation("ProjectCreator")
  createdTasks  Task[]     @relation("TaskCreator")

  // tags attached to this member (scoped by community)
  memberTags    MemberTag[]

  @@unique([userId, communityId])
}

/* ═══════════ PROJECTS & TASKS ═══════════ */

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  balance       BigInt
  budget        BigInt?

  /* FK → Community that owns this project */
  communityId   String
  community     Community     @relation("CommunityProjects", fields: [communityId], references: [id])

  /* FK → Member who is team leader */
  teamLeaderId  String
  teamLeader    Member        @relation("TeamLeader", fields: [teamLeaderId], references: [id])

  /* FK → Member who created it */
  creatorId     String
  creator       Member        @relation("ProjectCreator", fields: [creatorId], references: [id])

  /* FK → User (to satisfy User.projects[]) */
  ownerId       String
  owner         User          @relation("UserProjects", fields: [ownerId], references: [id])

  deadline      String
  status        ProjectStatus

  members       Member[]      @relation("MemberProjects")
  tasks         Task[]

  // tags attached to this project (scoped by community)
  projectTags   ProjectTag[]

  createdAt     String?
  updatedAt     String?
}

model Task {
  id          String       @id @default(uuid())
  name        String
  description String
  status      TaskStatus
  priority    TaskPriority
  balance     BigInt
  budget      BigInt?
  deadline    String

  /* FK → User (to satisfy User.tasks[]) */
  ownerId     String
  owner       User         @relation("UserTasks", fields: [ownerId], references: [id])

  /* FK → Project (Task ↔ Project) */
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id])

  /* many-to-many Task ↔ Member */
  members     Member[]     @relation("MemberTasks")

  /* FK → Member who created the task */
  creatorId   String
  creator     Member       @relation("TaskCreator", fields: [creatorId], references: [id])

  createdAt   String?
  updatedAt   String?
}

/* ═══════════ TAGGING (Community-scoped) ═══════════ */

// Community-scoped tag catalog
model Tag {
  id          String     @id @default(uuid())
  communityId String
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)

  slug   String          // canonical, lowercase, no spaces
  label  String

  memberTags  MemberTag[]
  projectTags ProjectTag[]

  @@unique([communityId, slug], name: "community_slug_unique")
  @@index([communityId, slug])
}

// Link a Member to a Tag within the same Community
model MemberTag {
  id          String     @id @default(uuid())

  communityId String
  memberId    String
  tagId       String

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  member    Member    @relation(fields: [memberId],    references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId],       references: [id], onDelete: Cascade)

  addedAt   DateTime  @default(now())
  addedBy   String?   // optional: Member.id or User.id of actor

  // one tag per member per community
  @@unique([communityId, memberId, tagId], name: "community_member_tag_unique")
  @@index([communityId, tagId])
  @@index([communityId, memberId])
}

// Link a Project to a Tag within the same Community
model ProjectTag {
  id          String     @id @default(uuid())

  communityId String
  projectId   String
  tagId       String

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId],   references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId],       references: [id], onDelete: Cascade)

  addedAt   DateTime  @default(now())
  addedBy   String?   // optional: Member.id or User.id who tagged

  // one tag per project per community
  @@unique([communityId, projectId, tagId], name: "community_project_tag_unique")
  @@index([communityId, tagId])
  @@index([communityId, projectId])
}